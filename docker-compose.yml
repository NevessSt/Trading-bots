version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading_bot_db
    environment:
      POSTGRES_DB: trading_bot_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis
    ports:
      - "6379:6379"
    networks:
      - trading_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_bot_backend
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password123@postgres:5432/trading_bot_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
      - FLASK_ENV=production
      - FLASK_DEBUG=False
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/venv
    networks:
      - trading_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_bot_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - trading_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - trading_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  trading_network:
    driver: bridge