name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'

jobs:
  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/trading_bot_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-jwt-secret-for-ci" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        flask db upgrade
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junit-xml=test-results-unit.xml
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        pytest tests/integration/ -v --cov=. --cov-append --cov-report=xml --cov-report=html --junit-xml=test-results-integration.xml
    
    - name: Run security tests
      working-directory: ./backend
      run: |
        pytest tests/security/ -v --junit-xml=test-results-security.xml
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        pytest tests/performance/ -v --junit-xml=test-results-performance.xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/test-results-*.xml
          backend/htmlcov/
    
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      working-directory: ./backend
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
    
    - name: Security scan with bandit
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: backend/bandit-report.json

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./frontend
      run: |
        npm run test:coverage -- --watchAll=false --testResultsProcessor=jest-junit
      env:
        JEST_JUNIT_OUTPUT_DIR: ./test-results
        JEST_JUNIT_OUTPUT_NAME: frontend-unit-tests.xml
    
    - name: Run integration tests
      working-directory: ./frontend
      run: |
        npm run test:integration -- --watchAll=false
    
    - name: Lint with ESLint
      working-directory: ./frontend
      run: |
        npm run lint
    
    - name: Type checking with TypeScript
      working-directory: ./frontend
      run: |
        npm run type-check
    
    - name: Build application
      working-directory: ./frontend
      run: |
        npm run build
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/test-results/
          frontend/coverage/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # End-to-End Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_bot_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/trading_bot_e2e" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-e2e" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-jwt-secret-for-e2e" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        flask db upgrade
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python app.py &
        sleep 10
      env:
        FLASK_ENV: testing
        PORT: 5000
    
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --port 3000 &
        sleep 5
    
    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      working-directory: ./frontend
      run: |
        npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
        API_BASE_URL: http://localhost:5000
    
    - name: Run backend E2E tests
      working-directory: ./backend
      run: |
        pytest tests/e2e/ -v --junit-xml=test-results-e2e.xml
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
          backend/test-results-e2e.xml

  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
    
    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_bot_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install locust
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/trading_bot_perf" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-perf" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-jwt-secret-for-perf" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        flask db upgrade
    
    - name: Start application
      working-directory: ./backend
      run: |
        python app.py &
        sleep 10
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        pytest tests/performance/ -v --junit-xml=test-results-performance.xml
    
    - name: Run load tests with Locust
      working-directory: ./backend
      run: |
        locust -f tests/performance/locustfile.py --headless --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:5000 --html performance-report.html
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          backend/test-results-performance.xml
          backend/performance-report.html

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: deploy to Heroku, AWS, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed. Status: ${{ job.status }}"
        # Add notification commands (Slack, email, etc.)

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, code-quality, performance-tests, deploy]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        # Add cleanup commands if needed
    
    - name: Generate test report
      run: |
        echo "Generating comprehensive test report..."
        # Combine all test results into a single report
    
    - name: Update badges
      run: |
        echo "Updating README badges..."
        # Update coverage and build status badges