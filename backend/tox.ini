[tox]
# Tox configuration for Trading Bot Platform
envlist = 
    py{39,310,311,312}-{unit,integration,security}
    py311-{e2e,performance,lint,type,coverage}
    py311-{flake8,mypy,bandit,safety}
    docs
    report

skipsdist = False
minversion = 4.0

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Base test environment configuration
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-test.txt

setenv =
    PYTHONPATH = {toxinidir}
    FLASK_ENV = testing
    DATABASE_URL = sqlite:///:memory:
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-for-tox
    JWT_SECRET_KEY = test-jwt-secret-for-tox
    TESTING = true
    WTF_CSRF_ENABLED = false
    MAIL_SUPPRESS_SEND = true
    CELERY_ALWAYS_EAGER = true
    RATE_LIMIT_ENABLED = false
    CACHE_TYPE = simple

passenv = 
    CI
    GITHUB_*
    CODECOV_*
    COVERALLS_*
    TRAVIS_*
    APPVEYOR_*
    CIRCLECI_*
    JENKINS_*
    BUILD_*
    PYTEST_*
    HOME
    USERPROFILE
    TEMP
    TMP

commands_pre =
    python -m pip install --upgrade pip
    pip check

[testenv:py{39,310,311,312}-unit]
# Unit tests for different Python versions
commands =
    pytest tests/unit/ \
        --cov=. \
        --cov-branch \
        --cov-report=term-missing \
        --cov-report=xml:coverage-{envname}.xml \
        --cov-report=html:htmlcov-{envname} \
        --junit-xml=test-results/junit-{envname}.xml \
        --tb=short \
        -v

[testenv:py{39,310,311,312}-integration]
# Integration tests for different Python versions
commands =
    pytest tests/integration/ \
        --cov=. \
        --cov-append \
        --cov-branch \
        --cov-report=term-missing \
        --cov-report=xml:coverage-{envname}.xml \
        --junit-xml=test-results/junit-{envname}.xml \
        --tb=short \
        -v

[testenv:py{39,310,311,312}-security]
# Security tests for different Python versions
commands =
    pytest tests/security/ \
        --junit-xml=test-results/junit-{envname}.xml \
        --tb=short \
        -v

[testenv:py311-e2e]
# End-to-end tests (only on Python 3.11)
commands =
    pytest tests/e2e/ \
        --junit-xml=test-results/junit-{envname}.xml \
        --tb=short \
        -v \
        --timeout=300

[testenv:py311-performance]
# Performance tests (only on Python 3.11)
commands =
    pytest tests/performance/ \
        --junit-xml=test-results/junit-{envname}.xml \
        --tb=short \
        -v \
        --timeout=600

[testenv:py311-lint]
# Code linting
commands =
    flake8 . \
        --count \
        --statistics \
        --format=%(path)s:%(row)d:%(col)d: %(code)s %(text)s \
        --output-file=test-results/flake8-report.txt

[testenv:py311-type]
# Type checking
commands =
    mypy . \
        --ignore-missing-imports \
        --no-strict-optional \
        --txt-report test-results \
        --html-report test-results/mypy-html

[testenv:py311-coverage]
# Coverage reporting
commands =
    coverage combine
    coverage report --show-missing
    coverage html -d htmlcov-combined
    coverage xml -o coverage-combined.xml

[testenv:flake8]
# Dedicated flake8 environment
deps = 
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.2
    flake8-bugbear>=23.7.10
    flake8-comprehensions>=3.14.0
    flake8-bandit>=4.1.1
    flake8-pytest-style>=1.7.2
    flake8-flask>=0.9.3

commands =
    flake8 . --count --statistics

[testenv:mypy]
# Dedicated mypy environment
deps =
    mypy>=1.5.0
    types-requests>=2.31.0
    types-redis>=4.6.0
    types-Flask>=1.1.6
    types-SQLAlchemy>=1.4.53
    types-python-dateutil>=2.8.19
    types-pytz>=2023.3.0

commands =
    mypy . --ignore-missing-imports --no-strict-optional

[testenv:bandit]
# Security scanning with bandit
deps =
    bandit>=1.7.5

commands =
    bandit -r . -f json -o test-results/bandit-report.json
    bandit -r . -f txt

[testenv:safety]
# Dependency security scanning
deps =
    safety>=2.3.5

commands =
    safety check --json --output test-results/safety-report.json
    safety check

[testenv:docs]
# Documentation building
changedir = docs
deps =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0

commands =
    sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:report]
# Test reporting and analysis
deps =
    coverage>=7.2.0
    pytest-html>=3.2.0
    allure-pytest>=2.13.2

commands =
    coverage combine
    coverage report
    coverage html
    python -c "print('\n=== Test Report Summary ===')"
    python -c "import os; print(f'Coverage reports: {os.path.exists("htmlcov")}')"
    python -c "import os; print(f'Test results: {os.path.exists("test-results")}')"

[testenv:load]
# Load testing environment
deps =
    {[testenv]deps}
    locust>=2.16.1

commands =
    python -c "print('Load testing requires manual execution of locust')"
    python -c "print('Run: locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:5000')"

[testenv:dev]
# Development environment
usedevelop = true
deps =
    {[testenv]deps}
    ipython>=8.14.0
    ipdb>=0.13.13
    pytest-watch>=4.2.0

commands =
    python -c "print('Development environment ready!')"
    python -c "print('Run tests with: pytest tests/')"
    python -c "print('Watch tests with: pytest-watch tests/')"

[testenv:clean]
# Clean up environment
skip_install = true
deps =
commands =
    python -c "import shutil, os; [shutil.rmtree(d, ignore_errors=True) for d in ['.coverage', 'htmlcov', 'test-results', '.pytest_cache', '.mypy_cache', '__pycache__']]"
    python -c "print('Cleanup complete!')"

[testenv:format]
# Code formatting
deps =
    black>=23.7.0
    isort>=5.12.0

commands =
    black .
    isort .
    python -c "print('Code formatting complete!')"

[testenv:check]
# Quick check environment
commands =
    python -m pytest tests/unit/ -x --tb=short
    flake8 . --count
    mypy . --ignore-missing-imports

[testenv:all]
# Run all tests
commands =
    pytest tests/ \
        --cov=. \
        --cov-branch \
        --cov-report=term-missing \
        --cov-report=html:htmlcov-all \
        --cov-report=xml:coverage-all.xml \
        --junit-xml=test-results/junit-all.xml \
        --tb=short \
        -v

# Flake8 configuration
[flake8]
max-line-length = 88
max-complexity = 10
select = E,W,F,C,B,N
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    F401,  # imported but unused (handled by isort)
    B008,  # do not perform function calls in argument defaults
    C901,  # too complex (handled by max-complexity)

exclude =
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv,
    env,
    migrations,
    alembic,
    node_modules,
    .pytest_cache,
    .mypy_cache,
    htmlcov,
    test-results

per-file-ignores =
    tests/*:S101,S106,S311,S608,B011
    conftest.py:F401,F811
    __init__.py:F401

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */env/*
    */.venv/*
    */migrations/*
    */alembic/*
    setup.py
    conftest.py
    */conftest.py
    */__pycache__/*
    */site-packages/*
    */dist/*
    */build/*
    */.git/*
    */.pytest_cache/*
    */htmlcov/*
    */test-results/*
    */logs/*
    */tmp/*
    */temp/*
    config/settings.py
    manage.py
    wsgi.py
    asgi.py
    run.py
    app.py
    main.py

branch = True
parallel = True

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    @overload
    # TYPE_CHECKING
    if TYPE_CHECKING:
    \.\.\.  # ellipsis
    pass
    except ImportError:
    except ModuleNotFoundError:

ignore_errors = True
skip_covered = False
skip_empty = True
show_missing = True
sort = Cover
precision = 2
fail_under = 80

[coverage:html]
directory = htmlcov
title = Trading Bot Platform Coverage Report

[coverage:xml]
output = coverage.xml

# Pytest configuration for tox
[tool:pytest]
minversion = 6.0
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --disable-warnings
    -ra

testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    security: Security tests
    performance: Performance tests
    slow: Slow running tests
    fast: Fast running tests
    smoke: Smoke tests
    regression: Regression tests
    critical: Critical functionality tests
    flaky: Tests that may be flaky
    skip_ci: Skip in CI environment
    windows_only: Windows specific tests
    linux_only: Linux specific tests

filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Timeout configuration
timeout = 300
timeout_method = thread

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S